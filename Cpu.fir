circuit Cpu :
  module RegFile :
    input clock : Clock
    input reset : Reset
    output io : { writePort : { flip en : UInt<1>, flip addr : UInt<5>, flip data : UInt<32>}, readPorts : { flip en : UInt<1>, flip addr : UInt<5>, data : UInt<32>}[2], debugRegs : UInt<32>[32]}

    wire _regs_WIRE : UInt<32>[32] @[RegFile.scala 14:29]
    _regs_WIRE[0] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[1] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[2] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[3] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[4] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[5] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[6] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[7] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[8] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[9] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[10] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[11] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[12] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[13] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[14] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[15] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[16] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[17] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[18] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[19] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[20] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[21] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[22] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[23] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[24] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[25] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[26] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[27] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[28] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[29] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[30] <= UInt<32>("h0") @[RegFile.scala 14:29]
    _regs_WIRE[31] <= UInt<32>("h0") @[RegFile.scala 14:29]
    reg regs : UInt<32>[32], clock with :
      reset => (reset, _regs_WIRE) @[RegFile.scala 14:21]
    wire _readPortDataRegs_WIRE : UInt<32>[2] @[RegFile.scala 17:20]
    _readPortDataRegs_WIRE[0] <= UInt<32>("h0") @[RegFile.scala 17:20]
    _readPortDataRegs_WIRE[1] <= UInt<32>("h0") @[RegFile.scala 17:20]
    reg readPortDataRegs : UInt<32>[2], clock with :
      reset => (reset, _readPortDataRegs_WIRE) @[RegFile.scala 17:12]
    io.readPorts[0].data <= readPortDataRegs[0] @[RegFile.scala 19:34]
    io.readPorts[1].data <= readPortDataRegs[1] @[RegFile.scala 19:34]
    io.debugRegs <= regs @[RegFile.scala 21:16]
    node _regs_0_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_0_T_1 = eq(UInt<1>("h0"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_0_T_2 = and(_regs_0_T, _regs_0_T_1) @[RegFile.scala 27:50]
    node _regs_0_T_3 = mux(_regs_0_T_2, io.writePort.data, regs[0]) @[RegFile.scala 26:17]
    regs[0] <= _regs_0_T_3 @[RegFile.scala 26:11]
    node _regs_1_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_1_T_1 = eq(UInt<1>("h1"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_1_T_2 = and(_regs_1_T, _regs_1_T_1) @[RegFile.scala 27:50]
    node _regs_1_T_3 = mux(_regs_1_T_2, io.writePort.data, regs[1]) @[RegFile.scala 26:17]
    regs[1] <= _regs_1_T_3 @[RegFile.scala 26:11]
    node _regs_2_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_2_T_1 = eq(UInt<2>("h2"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_2_T_2 = and(_regs_2_T, _regs_2_T_1) @[RegFile.scala 27:50]
    node _regs_2_T_3 = mux(_regs_2_T_2, io.writePort.data, regs[2]) @[RegFile.scala 26:17]
    regs[2] <= _regs_2_T_3 @[RegFile.scala 26:11]
    node _regs_3_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_3_T_1 = eq(UInt<2>("h3"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_3_T_2 = and(_regs_3_T, _regs_3_T_1) @[RegFile.scala 27:50]
    node _regs_3_T_3 = mux(_regs_3_T_2, io.writePort.data, regs[3]) @[RegFile.scala 26:17]
    regs[3] <= _regs_3_T_3 @[RegFile.scala 26:11]
    node _regs_4_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_4_T_1 = eq(UInt<3>("h4"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_4_T_2 = and(_regs_4_T, _regs_4_T_1) @[RegFile.scala 27:50]
    node _regs_4_T_3 = mux(_regs_4_T_2, io.writePort.data, regs[4]) @[RegFile.scala 26:17]
    regs[4] <= _regs_4_T_3 @[RegFile.scala 26:11]
    node _regs_5_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_5_T_1 = eq(UInt<3>("h5"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_5_T_2 = and(_regs_5_T, _regs_5_T_1) @[RegFile.scala 27:50]
    node _regs_5_T_3 = mux(_regs_5_T_2, io.writePort.data, regs[5]) @[RegFile.scala 26:17]
    regs[5] <= _regs_5_T_3 @[RegFile.scala 26:11]
    node _regs_6_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_6_T_1 = eq(UInt<3>("h6"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_6_T_2 = and(_regs_6_T, _regs_6_T_1) @[RegFile.scala 27:50]
    node _regs_6_T_3 = mux(_regs_6_T_2, io.writePort.data, regs[6]) @[RegFile.scala 26:17]
    regs[6] <= _regs_6_T_3 @[RegFile.scala 26:11]
    node _regs_7_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_7_T_1 = eq(UInt<3>("h7"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_7_T_2 = and(_regs_7_T, _regs_7_T_1) @[RegFile.scala 27:50]
    node _regs_7_T_3 = mux(_regs_7_T_2, io.writePort.data, regs[7]) @[RegFile.scala 26:17]
    regs[7] <= _regs_7_T_3 @[RegFile.scala 26:11]
    node _regs_8_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_8_T_1 = eq(UInt<4>("h8"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_8_T_2 = and(_regs_8_T, _regs_8_T_1) @[RegFile.scala 27:50]
    node _regs_8_T_3 = mux(_regs_8_T_2, io.writePort.data, regs[8]) @[RegFile.scala 26:17]
    regs[8] <= _regs_8_T_3 @[RegFile.scala 26:11]
    node _regs_9_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_9_T_1 = eq(UInt<4>("h9"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_9_T_2 = and(_regs_9_T, _regs_9_T_1) @[RegFile.scala 27:50]
    node _regs_9_T_3 = mux(_regs_9_T_2, io.writePort.data, regs[9]) @[RegFile.scala 26:17]
    regs[9] <= _regs_9_T_3 @[RegFile.scala 26:11]
    node _regs_10_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_10_T_1 = eq(UInt<4>("ha"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_10_T_2 = and(_regs_10_T, _regs_10_T_1) @[RegFile.scala 27:50]
    node _regs_10_T_3 = mux(_regs_10_T_2, io.writePort.data, regs[10]) @[RegFile.scala 26:17]
    regs[10] <= _regs_10_T_3 @[RegFile.scala 26:11]
    node _regs_11_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_11_T_1 = eq(UInt<4>("hb"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_11_T_2 = and(_regs_11_T, _regs_11_T_1) @[RegFile.scala 27:50]
    node _regs_11_T_3 = mux(_regs_11_T_2, io.writePort.data, regs[11]) @[RegFile.scala 26:17]
    regs[11] <= _regs_11_T_3 @[RegFile.scala 26:11]
    node _regs_12_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_12_T_1 = eq(UInt<4>("hc"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_12_T_2 = and(_regs_12_T, _regs_12_T_1) @[RegFile.scala 27:50]
    node _regs_12_T_3 = mux(_regs_12_T_2, io.writePort.data, regs[12]) @[RegFile.scala 26:17]
    regs[12] <= _regs_12_T_3 @[RegFile.scala 26:11]
    node _regs_13_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_13_T_1 = eq(UInt<4>("hd"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_13_T_2 = and(_regs_13_T, _regs_13_T_1) @[RegFile.scala 27:50]
    node _regs_13_T_3 = mux(_regs_13_T_2, io.writePort.data, regs[13]) @[RegFile.scala 26:17]
    regs[13] <= _regs_13_T_3 @[RegFile.scala 26:11]
    node _regs_14_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_14_T_1 = eq(UInt<4>("he"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_14_T_2 = and(_regs_14_T, _regs_14_T_1) @[RegFile.scala 27:50]
    node _regs_14_T_3 = mux(_regs_14_T_2, io.writePort.data, regs[14]) @[RegFile.scala 26:17]
    regs[14] <= _regs_14_T_3 @[RegFile.scala 26:11]
    node _regs_15_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_15_T_1 = eq(UInt<4>("hf"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_15_T_2 = and(_regs_15_T, _regs_15_T_1) @[RegFile.scala 27:50]
    node _regs_15_T_3 = mux(_regs_15_T_2, io.writePort.data, regs[15]) @[RegFile.scala 26:17]
    regs[15] <= _regs_15_T_3 @[RegFile.scala 26:11]
    node _regs_16_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_16_T_1 = eq(UInt<5>("h10"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_16_T_2 = and(_regs_16_T, _regs_16_T_1) @[RegFile.scala 27:50]
    node _regs_16_T_3 = mux(_regs_16_T_2, io.writePort.data, regs[16]) @[RegFile.scala 26:17]
    regs[16] <= _regs_16_T_3 @[RegFile.scala 26:11]
    node _regs_17_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_17_T_1 = eq(UInt<5>("h11"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_17_T_2 = and(_regs_17_T, _regs_17_T_1) @[RegFile.scala 27:50]
    node _regs_17_T_3 = mux(_regs_17_T_2, io.writePort.data, regs[17]) @[RegFile.scala 26:17]
    regs[17] <= _regs_17_T_3 @[RegFile.scala 26:11]
    node _regs_18_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_18_T_1 = eq(UInt<5>("h12"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_18_T_2 = and(_regs_18_T, _regs_18_T_1) @[RegFile.scala 27:50]
    node _regs_18_T_3 = mux(_regs_18_T_2, io.writePort.data, regs[18]) @[RegFile.scala 26:17]
    regs[18] <= _regs_18_T_3 @[RegFile.scala 26:11]
    node _regs_19_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_19_T_1 = eq(UInt<5>("h13"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_19_T_2 = and(_regs_19_T, _regs_19_T_1) @[RegFile.scala 27:50]
    node _regs_19_T_3 = mux(_regs_19_T_2, io.writePort.data, regs[19]) @[RegFile.scala 26:17]
    regs[19] <= _regs_19_T_3 @[RegFile.scala 26:11]
    node _regs_20_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_20_T_1 = eq(UInt<5>("h14"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_20_T_2 = and(_regs_20_T, _regs_20_T_1) @[RegFile.scala 27:50]
    node _regs_20_T_3 = mux(_regs_20_T_2, io.writePort.data, regs[20]) @[RegFile.scala 26:17]
    regs[20] <= _regs_20_T_3 @[RegFile.scala 26:11]
    node _regs_21_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_21_T_1 = eq(UInt<5>("h15"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_21_T_2 = and(_regs_21_T, _regs_21_T_1) @[RegFile.scala 27:50]
    node _regs_21_T_3 = mux(_regs_21_T_2, io.writePort.data, regs[21]) @[RegFile.scala 26:17]
    regs[21] <= _regs_21_T_3 @[RegFile.scala 26:11]
    node _regs_22_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_22_T_1 = eq(UInt<5>("h16"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_22_T_2 = and(_regs_22_T, _regs_22_T_1) @[RegFile.scala 27:50]
    node _regs_22_T_3 = mux(_regs_22_T_2, io.writePort.data, regs[22]) @[RegFile.scala 26:17]
    regs[22] <= _regs_22_T_3 @[RegFile.scala 26:11]
    node _regs_23_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_23_T_1 = eq(UInt<5>("h17"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_23_T_2 = and(_regs_23_T, _regs_23_T_1) @[RegFile.scala 27:50]
    node _regs_23_T_3 = mux(_regs_23_T_2, io.writePort.data, regs[23]) @[RegFile.scala 26:17]
    regs[23] <= _regs_23_T_3 @[RegFile.scala 26:11]
    node _regs_24_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_24_T_1 = eq(UInt<5>("h18"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_24_T_2 = and(_regs_24_T, _regs_24_T_1) @[RegFile.scala 27:50]
    node _regs_24_T_3 = mux(_regs_24_T_2, io.writePort.data, regs[24]) @[RegFile.scala 26:17]
    regs[24] <= _regs_24_T_3 @[RegFile.scala 26:11]
    node _regs_25_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_25_T_1 = eq(UInt<5>("h19"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_25_T_2 = and(_regs_25_T, _regs_25_T_1) @[RegFile.scala 27:50]
    node _regs_25_T_3 = mux(_regs_25_T_2, io.writePort.data, regs[25]) @[RegFile.scala 26:17]
    regs[25] <= _regs_25_T_3 @[RegFile.scala 26:11]
    node _regs_26_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_26_T_1 = eq(UInt<5>("h1a"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_26_T_2 = and(_regs_26_T, _regs_26_T_1) @[RegFile.scala 27:50]
    node _regs_26_T_3 = mux(_regs_26_T_2, io.writePort.data, regs[26]) @[RegFile.scala 26:17]
    regs[26] <= _regs_26_T_3 @[RegFile.scala 26:11]
    node _regs_27_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_27_T_1 = eq(UInt<5>("h1b"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_27_T_2 = and(_regs_27_T, _regs_27_T_1) @[RegFile.scala 27:50]
    node _regs_27_T_3 = mux(_regs_27_T_2, io.writePort.data, regs[27]) @[RegFile.scala 26:17]
    regs[27] <= _regs_27_T_3 @[RegFile.scala 26:11]
    node _regs_28_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_28_T_1 = eq(UInt<5>("h1c"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_28_T_2 = and(_regs_28_T, _regs_28_T_1) @[RegFile.scala 27:50]
    node _regs_28_T_3 = mux(_regs_28_T_2, io.writePort.data, regs[28]) @[RegFile.scala 26:17]
    regs[28] <= _regs_28_T_3 @[RegFile.scala 26:11]
    node _regs_29_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_29_T_1 = eq(UInt<5>("h1d"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_29_T_2 = and(_regs_29_T, _regs_29_T_1) @[RegFile.scala 27:50]
    node _regs_29_T_3 = mux(_regs_29_T_2, io.writePort.data, regs[29]) @[RegFile.scala 26:17]
    regs[29] <= _regs_29_T_3 @[RegFile.scala 26:11]
    node _regs_30_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_30_T_1 = eq(UInt<5>("h1e"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_30_T_2 = and(_regs_30_T, _regs_30_T_1) @[RegFile.scala 27:50]
    node _regs_30_T_3 = mux(_regs_30_T_2, io.writePort.data, regs[30]) @[RegFile.scala 26:17]
    regs[30] <= _regs_30_T_3 @[RegFile.scala 26:11]
    node _regs_31_T = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 27:25]
    node _regs_31_T_1 = eq(UInt<5>("h1f"), io.writePort.addr) @[RegFile.scala 27:61]
    node _regs_31_T_2 = and(_regs_31_T, _regs_31_T_1) @[RegFile.scala 27:50]
    node _regs_31_T_3 = mux(_regs_31_T_2, io.writePort.data, regs[31]) @[RegFile.scala 26:17]
    regs[31] <= _regs_31_T_3 @[RegFile.scala 26:11]
    node _T = eq(io.readPorts[0].addr, UInt<1>("h0")) @[RegFile.scala 35:26]
    when _T : @[RegFile.scala 35:35]
      readPortDataRegs[0] <= UInt<32>("h0") @[RegFile.scala 36:17]
    else :
      when io.readPorts[0].en : @[RegFile.scala 37:31]
        node _T_1 = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 39:27]
        node _T_2 = eq(io.readPorts[0].addr, io.writePort.addr) @[RegFile.scala 39:69]
        node _T_3 = and(_T_1, _T_2) @[RegFile.scala 39:52]
        when _T_3 : @[RegFile.scala 40:11]
          readPortDataRegs[0] <= io.writePort.data @[RegFile.scala 41:19]
        else :
          readPortDataRegs[0] <= regs[io.readPorts[0].addr] @[RegFile.scala 43:19]
      else :
        readPortDataRegs[0] <= UInt<32>("h0") @[RegFile.scala 46:17]
    node _T_4 = eq(io.readPorts[1].addr, UInt<1>("h0")) @[RegFile.scala 35:26]
    when _T_4 : @[RegFile.scala 35:35]
      readPortDataRegs[1] <= UInt<32>("h0") @[RegFile.scala 36:17]
    else :
      when io.readPorts[1].en : @[RegFile.scala 37:31]
        node _T_5 = eq(io.writePort.en, UInt<1>("h1")) @[RegFile.scala 39:27]
        node _T_6 = eq(io.readPorts[1].addr, io.writePort.addr) @[RegFile.scala 39:69]
        node _T_7 = and(_T_5, _T_6) @[RegFile.scala 39:52]
        when _T_7 : @[RegFile.scala 40:11]
          readPortDataRegs[1] <= io.writePort.data @[RegFile.scala 41:19]
        else :
          readPortDataRegs[1] <= regs[io.readPorts[1].addr] @[RegFile.scala 43:19]
      else :
        readPortDataRegs[1] <= UInt<32>("h0") @[RegFile.scala 46:17]

  module Pc :
    input clock : Clock
    input reset : Reset
    output io : { pc : UInt<32>, ce : UInt<1>}

    reg pcReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Pc.scala 11:22]
    io.pc <= pcReg @[Pc.scala 12:9]
    reg ceReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Pc.scala 13:22]
    ceReg <= UInt<1>("h1") @[Pc.scala 13:22]
    io.ce <= ceReg @[Pc.scala 14:9]
    node _T = eq(ceReg, UInt<1>("h0")) @[Pc.scala 16:14]
    when _T : @[Pc.scala 16:27]
      pcReg <= UInt<1>("h0") @[Pc.scala 17:11]
    else :
      node _pcReg_T = add(pcReg, UInt<1>("h1")) @[Pc.scala 19:20]
      node _pcReg_T_1 = tail(_pcReg_T, 1) @[Pc.scala 19:20]
      pcReg <= _pcReg_T_1 @[Pc.scala 19:11]

  module Id :
    input clock : Clock
    input reset : Reset
    output io : { flip pc : UInt<32>, flip inst : UInt<32>, flip regFileReadPorts : { flip en : UInt<1>, flip addr : UInt<5>, data : UInt<32>}[2], flip execPort : { flip aluOp : UInt<8>, flip aluSel : UInt<3>, flip regData : UInt<32>[2], flip destRegAddr : UInt<5>, flip isWrite : UInt<1>}, exRfWriteFeedbackPort : { flip en : UInt<1>, flip addr : UInt<5>, flip data : UInt<32>}, memRfWriteFeedbackPort : { flip en : UInt<1>, flip addr : UInt<5>, flip data : UInt<32>}}

    wire regFileReadRegs_bundle : { en : UInt<1>, addr : UInt<5>} @[Id.scala 27:26]
    regFileReadRegs_bundle.en <= UInt<1>("h0") @[Id.scala 28:21]
    regFileReadRegs_bundle.addr <= UInt<5>("h0") @[Id.scala 29:21]
    wire regFileReadRegs_bundle_1 : { en : UInt<1>, addr : UInt<5>} @[Id.scala 27:26]
    regFileReadRegs_bundle_1.en <= UInt<1>("h0") @[Id.scala 28:21]
    regFileReadRegs_bundle_1.addr <= UInt<5>("h0") @[Id.scala 29:21]
    wire _regFileReadRegs_WIRE : { en : UInt<1>, addr : UInt<5>}[2] @[Id.scala 25:12]
    _regFileReadRegs_WIRE[0] <= regFileReadRegs_bundle @[Id.scala 25:12]
    _regFileReadRegs_WIRE[1] <= regFileReadRegs_bundle_1 @[Id.scala 25:12]
    reg regFileReadRegs : { en : UInt<1>, addr : UInt<5>}[2], clock with :
      reset => (reset, _regFileReadRegs_WIRE) @[Id.scala 24:32]
    io.regFileReadPorts[0].en <= regFileReadRegs[0].en @[Id.scala 36:17]
    io.regFileReadPorts[0].addr <= regFileReadRegs[0].addr @[Id.scala 37:17]
    io.regFileReadPorts[1].en <= regFileReadRegs[1].en @[Id.scala 36:17]
    io.regFileReadPorts[1].addr <= regFileReadRegs[1].addr @[Id.scala 37:17]
    node op = bits(io.inst, 31, 26) @[Id.scala 39:19]
    reg io_execPort_aluOp_aluOp : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[Id.scala 52:30]
    reg io_execPort_aluOp_aluSel : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Id.scala 53:30]
    reg io_execPort_aluOp_destRegAddr : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Id.scala 54:30]
    reg io_execPort_aluOp_isWrite : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Id.scala 55:30]
    wire _io_execPort_aluOp_regData_WIRE : UInt<32>[2] @[Id.scala 56:38]
    _io_execPort_aluOp_regData_WIRE[0] <= UInt<32>("h0") @[Id.scala 56:38]
    _io_execPort_aluOp_regData_WIRE[1] <= UInt<32>("h0") @[Id.scala 56:38]
    reg io_execPort_aluOp_regData : UInt<32>[2], clock with :
      reset => (reset, _io_execPort_aluOp_regData_WIRE) @[Id.scala 56:30]
    io.execPort.aluOp <= io_execPort_aluOp_aluOp @[Id.scala 41:27]
    io.execPort.aluSel <= io_execPort_aluOp_aluSel @[Id.scala 42:27]
    io.execPort.destRegAddr <= io_execPort_aluOp_destRegAddr @[Id.scala 43:27]
    io.execPort.isWrite <= io_execPort_aluOp_isWrite @[Id.scala 44:27]
    node op2 = bits(io.inst, 10, 6) @[Id.scala 45:26]
    node op3 = bits(io.inst, 5, 0) @[Id.scala 46:26]
    node op4 = bits(io.inst, 20, 16) @[Id.scala 47:26]
    reg imm : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Id.scala 48:26]
    node _instValid_T = eq(UInt<1>("h0"), UInt<1>("h0")) @[Id.scala 49:27]
    reg instValid : UInt<1>, clock with :
      reset => (reset, _instValid_T) @[Id.scala 49:26]
    regFileReadRegs[0].en <= UInt<1>("h0") @[Id.scala 62:18]
    node _regFileReadRegs_0_addr_T = bits(io.inst, 25, 21) @[Id.scala 67:25]
    node _regFileReadRegs_0_addr_T_1 = bits(io.inst, 20, 16) @[Id.scala 68:25]
    node _regFileReadRegs_0_addr_T_2 = eq(UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:61]
    node _regFileReadRegs_0_addr_T_3 = mux(_regFileReadRegs_0_addr_T_2, _regFileReadRegs_0_addr_T_1, _regFileReadRegs_0_addr_T) @[Mux.scala 81:58]
    regFileReadRegs[0].addr <= _regFileReadRegs_0_addr_T_3 @[Id.scala 63:20]
    regFileReadRegs[1].en <= UInt<1>("h0") @[Id.scala 62:18]
    node _regFileReadRegs_1_addr_T = bits(io.inst, 25, 21) @[Id.scala 67:25]
    node _regFileReadRegs_1_addr_T_1 = bits(io.inst, 20, 16) @[Id.scala 68:25]
    node _regFileReadRegs_1_addr_T_2 = eq(UInt<1>("h1"), UInt<1>("h1")) @[Mux.scala 81:61]
    node _regFileReadRegs_1_addr_T_3 = mux(_regFileReadRegs_1_addr_T_2, _regFileReadRegs_1_addr_T_1, _regFileReadRegs_1_addr_T) @[Mux.scala 81:58]
    regFileReadRegs[1].addr <= _regFileReadRegs_1_addr_T_3 @[Id.scala 63:20]
    io_execPort_aluOp_aluOp <= UInt<8>("h0") @[Id.scala 72:23]
    io_execPort_aluOp_aluSel <= UInt<3>("h0") @[Id.scala 73:23]
    io_execPort_aluOp_isWrite <= UInt<1>("h0") @[Id.scala 74:23]
    node _destRegAddr_T = bits(io.inst, 15, 11) @[Id.scala 75:33]
    io_execPort_aluOp_destRegAddr <= _destRegAddr_T @[Id.scala 75:23]
    node _instValid_T_1 = eq(UInt<1>("h0"), UInt<1>("h0")) @[Id.scala 76:26]
    instValid <= _instValid_T_1 @[Id.scala 76:23]
    imm <= UInt<32>("h0") @[Id.scala 77:23]
    node _T = eq(UInt<6>("hd"), op) @[Id.scala 80:14]
    when _T : @[Id.scala 80:14]
      io_execPort_aluOp_isWrite <= UInt<1>("h1") @[Id.scala 82:29]
      io_execPort_aluOp_aluOp <= UInt<8>("h25") @[Id.scala 83:29]
      io_execPort_aluOp_aluSel <= UInt<3>("h1") @[Id.scala 84:29]
      regFileReadRegs[0].en <= UInt<1>("h1") @[Id.scala 85:29]
      node _imm_T = bits(io.inst, 15, 0) @[Id.scala 86:39]
      imm <= _imm_T @[Id.scala 86:29]
      node _destRegAddr_T_1 = bits(io.inst, 20, 16) @[Id.scala 87:39]
      io_execPort_aluOp_destRegAddr <= _destRegAddr_T_1 @[Id.scala 87:29]
      instValid <= UInt<1>("h1") @[Id.scala 88:29]
    when io.regFileReadPorts[0].en : @[Id.scala 96:25]
      io_execPort_aluOp_regData[0] <= io.regFileReadPorts[0].data @[Id.scala 97:14]
      node _T_1 = eq(io.exRfWriteFeedbackPort.addr, io.regFileReadPorts[0].addr) @[Id.scala 101:72]
      node _T_2 = and(io.exRfWriteFeedbackPort.en, _T_1) @[Id.scala 101:39]
      when _T_2 : @[Id.scala 102:11]
        io_execPort_aluOp_regData[0] <= io.exRfWriteFeedbackPort.data @[Id.scala 103:16]
      else :
        node _T_3 = eq(io.memRfWriteFeedbackPort.addr, io.regFileReadPorts[0].addr) @[Id.scala 105:74]
        node _T_4 = and(io.memRfWriteFeedbackPort.en, _T_3) @[Id.scala 105:40]
        when _T_4 : @[Id.scala 106:11]
          io_execPort_aluOp_regData[0] <= io.memRfWriteFeedbackPort.data @[Id.scala 107:16]
    else :
      io_execPort_aluOp_regData[0] <= imm @[Id.scala 110:14]
    when io.regFileReadPorts[1].en : @[Id.scala 96:25]
      io_execPort_aluOp_regData[1] <= io.regFileReadPorts[1].data @[Id.scala 97:14]
      node _T_5 = eq(io.exRfWriteFeedbackPort.addr, io.regFileReadPorts[1].addr) @[Id.scala 101:72]
      node _T_6 = and(io.exRfWriteFeedbackPort.en, _T_5) @[Id.scala 101:39]
      when _T_6 : @[Id.scala 102:11]
        io_execPort_aluOp_regData[1] <= io.exRfWriteFeedbackPort.data @[Id.scala 103:16]
      else :
        node _T_7 = eq(io.memRfWriteFeedbackPort.addr, io.regFileReadPorts[1].addr) @[Id.scala 105:74]
        node _T_8 = and(io.memRfWriteFeedbackPort.en, _T_7) @[Id.scala 105:40]
        when _T_8 : @[Id.scala 106:11]
          io_execPort_aluOp_regData[1] <= io.memRfWriteFeedbackPort.data @[Id.scala 107:16]
    else :
      io_execPort_aluOp_regData[1] <= imm @[Id.scala 110:14]

  module Ex :
    input clock : Clock
    input reset : Reset
    output io : { execPort : { flip aluOp : UInt<8>, flip aluSel : UInt<3>, flip regData : UInt<32>[2], flip destRegAddr : UInt<5>, flip isWrite : UInt<1>}, flip rfWritePort : { flip en : UInt<1>, flip addr : UInt<5>, flip data : UInt<32>}, flip rfWriteImmPort : { flip en : UInt<1>, flip addr : UInt<5>, flip data : UInt<32>}}

    wire logicOut : UInt<32> @[Ex.scala 13:22]
    reg io_rfWritePort_en_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Ex.scala 16:21]
    reg io_rfWritePort_en_addr : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[Ex.scala 17:23]
    reg io_rfWritePort_en_data : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Ex.scala 18:23]
    io.rfWritePort.en <= io_rfWritePort_en_en @[Ex.scala 21:21]
    io.rfWritePort.addr <= io_rfWritePort_en_addr @[Ex.scala 22:23]
    io.rfWritePort.data <= io_rfWritePort_en_data @[Ex.scala 23:23]
    logicOut <= UInt<32>("h0") @[Ex.scala 26:12]
    node _T = eq(UInt<8>("h25"), io.execPort.aluOp) @[Ex.scala 27:29]
    when _T : @[Ex.scala 27:29]
      node _logicOut_T = or(io.execPort.regData[0], io.execPort.regData[1]) @[Ex.scala 29:62]
      logicOut <= _logicOut_T @[Ex.scala 29:16]
    io.rfWriteImmPort.addr <= io.execPort.destRegAddr @[Ex.scala 34:26]
    io.rfWriteImmPort.en <= io.execPort.isWrite @[Ex.scala 35:24]
    io.rfWriteImmPort.data <= UInt<32>("h0") @[Ex.scala 36:26]
    node _T_1 = eq(UInt<3>("h1"), io.execPort.aluSel) @[Ex.scala 37:30]
    when _T_1 : @[Ex.scala 37:30]
      io.rfWriteImmPort.data <= logicOut @[Ex.scala 39:30]
    io_rfWritePort_en_addr <= io.rfWriteImmPort.addr @[Ex.scala 42:19]
    io_rfWritePort_en_en <= io.rfWriteImmPort.en @[Ex.scala 43:17]
    io_rfWritePort_en_data <= io.rfWriteImmPort.data @[Ex.scala 44:19]

  module Mem :
    input clock : Clock
    input reset : Reset
    output io : { rfWritePort_i : { flip en : UInt<1>, flip addr : UInt<5>, flip data : UInt<32>}, flip rfWritePort_o : { flip en : UInt<1>, flip addr : UInt<5>, flip data : UInt<32>}, flip rfWriteImmPort_o : { flip en : UInt<1>, flip addr : UInt<5>, flip data : UInt<32>}}

    io.rfWriteImmPort_o.data <= io.rfWritePort_i.data @[Mem.scala 13:23]
    io.rfWriteImmPort_o.addr <= io.rfWritePort_i.addr @[Mem.scala 13:23]
    io.rfWriteImmPort_o.en <= io.rfWritePort_i.en @[Mem.scala 13:23]
    reg io_rfWritePort_o_addr_addr : UInt, clock with :
      reset => (reset, UInt<5>("h0")) @[Mem.scala 16:23]
    io_rfWritePort_o_addr_addr <= io.rfWriteImmPort_o.addr @[Mem.scala 16:23]
    reg io_rfWritePort_o_addr_en : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Mem.scala 17:23]
    io_rfWritePort_o_addr_en <= io.rfWriteImmPort_o.en @[Mem.scala 17:23]
    reg io_rfWritePort_o_addr_data : UInt, clock with :
      reset => (reset, UInt<32>("h0")) @[Mem.scala 18:23]
    io_rfWritePort_o_addr_data <= io.rfWriteImmPort_o.data @[Mem.scala 18:23]
    io.rfWritePort_o.addr <= io_rfWritePort_o_addr_addr @[Mem.scala 21:25]
    io.rfWritePort_o.en <= io_rfWritePort_o_addr_en @[Mem.scala 22:25]
    io.rfWritePort_o.data <= io_rfWritePort_o_addr_data @[Mem.scala 23:25]

  module Cpu :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip romReadPort : { data : UInt<32>, flip addr : UInt<32>, flip en : UInt<1>}, debugPort : { regFileRegs : UInt<32>[32], pcRegPc : UInt<32>}}

    inst regFile of RegFile @[Cpu.scala 12:23]
    regFile.clock <= clock
    regFile.reset <= reset
    inst pcReg of Pc @[Cpu.scala 13:21]
    pcReg.clock <= clock
    pcReg.reset <= reset
    inst idStage of Id @[Cpu.scala 14:23]
    idStage.clock <= clock
    idStage.reset <= reset
    inst exStage of Ex @[Cpu.scala 15:23]
    exStage.clock <= clock
    exStage.reset <= reset
    inst memStage of Mem @[Cpu.scala 16:24]
    memStage.clock <= clock
    memStage.reset <= reset
    io.romReadPort.addr <= pcReg.io.pc @[Cpu.scala 19:23]
    io.romReadPort.en <= pcReg.io.ce @[Cpu.scala 20:21]
    idStage.io.pc <= pcReg.io.pc @[Cpu.scala 23:17]
    idStage.io.inst <= io.romReadPort.data @[Cpu.scala 24:19]
    idStage.io.regFileReadPorts[0].data <= regFile.io.readPorts[0].data @[Cpu.scala 27:17]
    idStage.io.regFileReadPorts[1].data <= regFile.io.readPorts[1].data @[Cpu.scala 27:17]
    regFile.io.readPorts[0].en <= idStage.io.regFileReadPorts[0].en @[Cpu.scala 33:15]
    regFile.io.readPorts[0].addr <= idStage.io.regFileReadPorts[0].addr @[Cpu.scala 34:17]
    regFile.io.readPorts[1].en <= idStage.io.regFileReadPorts[1].en @[Cpu.scala 33:15]
    regFile.io.readPorts[1].addr <= idStage.io.regFileReadPorts[1].addr @[Cpu.scala 34:17]
    idStage.io.exRfWriteFeedbackPort.data <= exStage.io.rfWriteImmPort.data @[Cpu.scala 38:36]
    idStage.io.exRfWriteFeedbackPort.addr <= exStage.io.rfWriteImmPort.addr @[Cpu.scala 38:36]
    idStage.io.exRfWriteFeedbackPort.en <= exStage.io.rfWriteImmPort.en @[Cpu.scala 38:36]
    idStage.io.memRfWriteFeedbackPort.data <= memStage.io.rfWriteImmPort_o.data @[Cpu.scala 39:37]
    idStage.io.memRfWriteFeedbackPort.addr <= memStage.io.rfWriteImmPort_o.addr @[Cpu.scala 39:37]
    idStage.io.memRfWriteFeedbackPort.en <= memStage.io.rfWriteImmPort_o.en @[Cpu.scala 39:37]
    exStage.io.execPort.isWrite <= idStage.io.execPort.isWrite @[Cpu.scala 42:23]
    exStage.io.execPort.destRegAddr <= idStage.io.execPort.destRegAddr @[Cpu.scala 42:23]
    exStage.io.execPort.regData[0] <= idStage.io.execPort.regData[0] @[Cpu.scala 42:23]
    exStage.io.execPort.regData[1] <= idStage.io.execPort.regData[1] @[Cpu.scala 42:23]
    exStage.io.execPort.aluSel <= idStage.io.execPort.aluSel @[Cpu.scala 42:23]
    exStage.io.execPort.aluOp <= idStage.io.execPort.aluOp @[Cpu.scala 42:23]
    memStage.io.rfWritePort_i.data <= exStage.io.rfWritePort.data @[Cpu.scala 45:29]
    memStage.io.rfWritePort_i.addr <= exStage.io.rfWritePort.addr @[Cpu.scala 45:29]
    memStage.io.rfWritePort_i.en <= exStage.io.rfWritePort.en @[Cpu.scala 45:29]
    regFile.io.writePort.data <= memStage.io.rfWritePort_o.data @[Cpu.scala 48:24]
    regFile.io.writePort.addr <= memStage.io.rfWritePort_o.addr @[Cpu.scala 48:24]
    regFile.io.writePort.en <= memStage.io.rfWritePort_o.en @[Cpu.scala 48:24]
    io.debugPort.regFileRegs <= regFile.io.debugRegs @[Cpu.scala 51:28]
    io.debugPort.pcRegPc <= pcReg.io.pc @[Cpu.scala 52:24]

